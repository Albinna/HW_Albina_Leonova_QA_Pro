{
	"info": {
		"_postman_id": "fad89356-711b-4098-82ae-35a0eb516c0b",
		"name": "HW_ SOAP API _Albina_Leonova",
		"description": "This is a collection of different SOAP APIs that are completley public and do not require any authentication, making it easier for consumers to play with and understand what APIs are all about by seeing the many different ways in which APIs can be used.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21835556"
	},
	"item": [
		{
			"name": "Book ISBN Numbers",
			"item": [
				{
					"name": "Is Valid ISBN13 Number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has valid XML structure\", function () {\r",
									"    const responseXml = pm.response.text();\r",
									"    const isValidStructure = responseXml.match(/<soap:Envelope.*?>([\\s\\S]*?)<soap:Body.*?>([\\s\\S]*?)<\\/soap:Body>[\\s\\S]*?<\\/soap:Envelope>/);\r",
									"    pm.expect(isValidStructure).to.not.be.null; \r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200, 'OK');\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in XML format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"text/xml; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"ISBN-13 is valid\", function () {\r",
									"    const responseXml = pm.response.text();\r",
									"    const isValidMatch = responseXml.match(/<m:IsValidISBN13Result>(true|false)<\\/m:IsValidISBN13Result>/);\r",
									"    pm.expect(isValidMatch[1]).to.eql(\"true\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains necessary elements\", function () {\r",
									"    const responseXml = pm.response.text();\r",
									"    pm.expect(responseXml).to.include(\"<m:IsValidISBN13Response\");\r",
									"    pm.expect(responseXml).to.include(\"<m:IsValidISBN13Result\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <IsValidISBN13 xmlns=\"http://webservices.daehosting.com/ISBN\">\n      <sISBN>978-1-4612-9090-2</sISBN>\n    </IsValidISBN13>\n  </soap:Body>\n</soap:Envelope>"
						},
						"url": {
							"raw": "http://webservices.daehosting.com/services/isbnservice.wso",
							"protocol": "http",
							"host": [
								"webservices",
								"daehosting",
								"com"
							],
							"path": [
								"services",
								"isbnservice.wso"
							]
						},
						"description": "The test is done by calculation on the first 12 digits and compare the result with the checksum number at the end. You have to pass a 13 digits number."
					},
					"response": []
				},
				{
					"name": "Is Valid ISBN10 Number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should have the correct structure\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(pm.response.text()).to.include(\"<m:IsValidISBN10Response\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid XML structure\", function () {\r",
									"    const responseXml = pm.response.text();\r",
									"    const isValidStructure = responseXml.match(/<soap:Envelope.*?>([\\s\\S]*?)<soap:Body.*?>([\\s\\S]*?)<\\/soap:Body>[\\s\\S]*?<\\/soap:Envelope>/);\r",
									"    pm.expect(isValidStructure).to.not.be.null; \r",
									"});\r",
									"\r",
									"pm.test(\"Response should contain a SOAP Envelope\", function () {\r",
									"    var responseBody = pm.response.text();\r",
									"    pm.expect(responseBody).to.include(\"<soap:Envelope\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response should contain a SOAP Body\", function () {\r",
									"    var responseBody = pm.response.text();\r",
									"    pm.expect(responseBody).to.include(\"<soap:Body\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be of type XML\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <IsValidISBN10 xmlns=\"http://webservices.daehosting.com/ISBN\">\n      <sISBN>0-19-852663-6</sISBN>\n    </IsValidISBN10>\n  </soap:Body>\n</soap:Envelope>"
						},
						"url": {
							"raw": "http://webservices.daehosting.com/services/isbnservice.wso",
							"protocol": "http",
							"host": [
								"webservices",
								"daehosting",
								"com"
							],
							"path": [
								"services",
								"isbnservice.wso"
							]
						},
						"description": "The test is done by calculation on the first 9 digits and compare the result with the checksum number at the end. You have to pass a 10 digits number or 8 digits and an X."
					},
					"response": []
				}
			],
			"description": "SOAP APIs for book ISBN numbers.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}